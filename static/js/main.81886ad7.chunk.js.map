{"version":3,"sources":["component/WeatherForecast.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherForecast","date","text","mintemp","maxtemp","icon","className","src","alt","App","useState","location","setLocation","weatherInfo","setWeatherInfo","city","setCity","params","key","useEffect","fetch","then","response","json","data","placeholder","onKeyDown","event","keyCode","onChange","target","value","onBlur","onClick","current","condition","temp_c","name","style","height","display","justifyContent","forecast","forecastday","day","mintemp_c","maxtemp_c","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81886ad7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./WeatherForecast.scss\";\r\n\r\nlet WeatherForecast = ({ date, text, mintemp, maxtemp, icon }) => {\r\n  return (\r\n    <div className=\"weather-container\">\r\n      <h5>{date}</h5>\r\n      <ul>\r\n        <li>\r\n          <img className=\"weather-icon-2\" src={icon} alt=\"\" />\r\n        </li>\r\n        <li className=\"text\">{text}</li>\r\n        <li className=\"max-temp\"> {maxtemp} °</li>\r\n        <li className=\"min-temp\">min temp: {mintemp} ° </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherForecast;\r\n","import { useEffect, useState } from \"react\";\nimport WeatherForecast from \"./component/WeatherForecast\";\nimport \"./App.scss\";\n\nconst App = () => {\n  const [location, setLocation] = useState(\"Bursa\");\n  const [weatherInfo, setWeatherInfo] = useState({});\n  const [city, setCity] = useState(\"\");\n\n  const params = {\n    key: \"45277b67ba8046cf80f170411210803\",\n    location,\n  };\n\n  useEffect(() => {\n    fetch(\n      `http://api.weatherapi.com/v1/forecast.json?key=${params.key}&q=${params.location}&days=3`\n    )\n      .then((response) => response.json())\n      .then((data) => setWeatherInfo(data));\n  }, [location]);\n\n  return (\n    <div className=\"weather-wrapper\">\n      <div>\n        <input\n          placeholder=\"Enter a city...\"\n          onKeyDown={(event) =>\n            event.keyCode === 13 ? setLocation(city) : null\n          }\n          onChange={(event) => setCity(event.target.value)}\n          onBlur={() => setLocation(city)}\n        />\n        <button className=\"btn\" onClick={() => setLocation(city)}>\n          Search\n        </button>\n      </div>\n\n      <div className=\"weather-card\">\n        {weatherInfo.current && (\n          <>\n            <img\n              className=\"weather-icon\"\n              src={weatherInfo.current.condition.icon}\n              alt={\"icon\"}\n            />\n            <h1>{weatherInfo.current.temp_c}°</h1>\n            <p>\n              {weatherInfo.location.name} -{\" \"}\n              <span>{weatherInfo.current.condition.text}</span>\n            </p>\n          </>\n        )}\n      </div>\n      <div\n        className=\"weather-card\"\n        style={{ height: \"300px\", display: \"flex\", justifyContent: \"center\" }}\n      >\n        {weatherInfo.current && (\n          <>\n            <WeatherForecast\n              date={weatherInfo.forecast.forecastday[0].date}\n              text={weatherInfo.forecast.forecastday[0].day.condition.text}\n              mintemp={weatherInfo.forecast.forecastday[0].day.mintemp_c}\n              maxtemp={weatherInfo.forecast.forecastday[0].day.maxtemp_c}\n              icon={weatherInfo.forecast.forecastday[0].day.condition.icon}\n            />\n            <WeatherForecast\n              date={weatherInfo.forecast.forecastday[1].date}\n              text={weatherInfo.forecast.forecastday[1].day.condition.text}\n              mintemp={weatherInfo.forecast.forecastday[1].day.mintemp_c}\n              maxtemp={weatherInfo.forecast.forecastday[1].day.maxtemp_c}\n              icon={weatherInfo.forecast.forecastday[1].day.condition.icon}\n            />\n            <WeatherForecast\n              date={weatherInfo.forecast.forecastday[2].date}\n              text={weatherInfo.forecast.forecastday[2].day.condition.text}\n              mintemp={weatherInfo.forecast.forecastday[2].day.mintemp_c}\n              maxtemp={weatherInfo.forecast.forecastday[2].day.maxtemp_c}\n              icon={weatherInfo.forecast.forecastday[2].day.condition.icon}\n            />\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}